2.장 테스트

2.1 UserDaoTest 다시 보기
2.1.1 테스트의 유용성

내가 예상하고 의도했던 대로 코드가 정확히 동작하는지를 확인해주는 행위를 테스트라 한다.

2.1.2 UserDaoTest의 특징

public class UserDaoTest {
	public static void main(String[] args) throws SQLException {
		ApplicationContext context = new GenericXmlApplicationContext(
			"applicationContext.xml");

		UserDao dao = context.getBean("userDao","UserDao.class);
		
		User user = new User();
		user.setId("user");
		user.setName("백기선");
		user.setPassword("married");

		dao.add(user);
		
		System.out.println(user.getId() + "등록 성공");
		
		User user2 = dao.get(user.getId());
		System.out.println(user2.getName());
		System.out.println(user2.getPassword());

		System.out.println(user2.getId() + " 조회 성공");
	}
}

수동 확인 작업의 번거로움
- 콘솔로 사람이 직접 확인함. 소스가 확인을 하지 않음.
실행 작업의 번거로움
- dao가 수백개일 때 그 사람이 다 확인해야함 

		System.out.println(user2.getName());
		System.out.println(user2.getPassword());
와같이 콘솔로 출력하는 부분을
if(!user.getName().equlas(user2.getName()) {
	System.out.println("테스트 실패 (name)");
} 
else if (!user.getPassword().equlas(user2.getPassword()) {
	System.out.println("테스트 실패(password)");
}
else {
	System.out.println("조회 테스트 성공");
}
과 같이 변경해서 소스가 검증하도록 유도.

*** 2.2.2 부터 다시 시작.!!!
