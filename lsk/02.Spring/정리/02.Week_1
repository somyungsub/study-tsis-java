XML설정을 할 수 있다.
1.8 XML을 이용한 설정

1.8.1  XML 설정
아래와 같이 생각하면 이해하기 쉽다.
@Configuration = <beans>
@bean = <bean>

@bean 메소드를 통해 얻을 수 있는 빈의 DI정보는 아래 세 가지다.
1. 빈의 이름
2. 빈의 클래스
3. 빈의 의존 오브젝트 [의존 오브젝트가 없는경우 생략가능] [수정자 메소드 필요 set{#변수이름}()]

@Bean ----------------------------------------------> <bean
public Connectionmaker
connectinoMaker() { -------------------------------> id = "connectiomMaker"
 return new DconnectionMaker(); ----------------> class = "springboock.......DConnectiomMaker" />
}


userDao.setConnectiomMaker(connectionMaker());
           <property name="connectiomMaker" ref="connectionMaker" />
<beans>
	<bean id="connectionMaker" class="springbook.user.dao.DConnectionMaker" />
	<bean id="userDao" class="springbook.dao.UserDao">
		<property name="connectiomMaker" ref="connectionMaker" /> <!-- ref는 위의 connectiomMaker를 가르키고 name의 connectionMaker는 수정자를 가르킨다.-->
	</bean>
</beans>

1.8.2 XML을 이용하는 애플리케이션 컨텍스트
GenericXmlApplicationContext : xml의 설정을 불러올 때 사용.
AnnotationConfigApplicationContext : annotation 설정을 불러올 때 사용.

1.8.3 DataSource 인터페이스로 변환
dataSource.setDriverClass(com.mysql.jdbc.Driver.class);
dataSource.setUrl("jdbc:mysql://localhost/springbook");
dataSource.setUserName("spring");
dataSource.setPassowrd("book");

<property name="driverClass" value="com.mysql.jdbc.Driver.class" />
<property name="url" value="jdbc:mysql://localhost/springbook" />
.
.


1.9 정리
