초난감 예외처리

1. 아무작업도 하지 않는 예외처리
 - e.printStack();
 - System.out.printl(e.getMessage);
2. 무의미 무책임 throws



예외의 종류와 특징

- 체크예외 : 명시적인 처리가 필요한 예외를 사용하고 다루는 방벙
1. java.lang.Error 
 - 시스템에 비정상적인 상황이 발생한 경우
 - OutOfMemory/ThreadDeath 등
 - 시스템 레벨에서 처리해야하고 애플리케이션에서는 해당 에러처리에 대해서는 신경 안 씀
 
2. java.lang.Exception
 - 애플리케이션 코드의 작업 중에 예외 발생시 사용
 - checked exception
   - RuntimeException 클래스를 상속하지 않은 Exception의 서브클래스
   - IOException/SQLException
 - unchecked exception : 강제적이지 않음
   - RuntimeException 클래스를 상속한 Exception의 서브클래스
 * Runtimeexception클래스는 Exception의 서브클래스지만 다른 서브클래스들과 특별하게 다움
  - NullpointerException : 오브젝트를 할당하지 않은 레퍼런스 변수 사용시
  - IllegalArgumentException : 허용되지 않는 값을 사용해서 메소드 호출시
  
 
 
 예외처리 방법
 
 1. 예외 복구
  - 사용자에게 예외상황을 인지시키고 문제를 해결해서 정상상태로 돌려놓아야 함
  - 
 2. 예외처리 회피 
  - 분명한 의도가 있을 때만 사용한다
 
 3. 예외 전환
  - 예외 회피와 비슷하지만, 적절한 예외로 전환해서 밖으로 던진다
  - 내부에서 발생한 예외에 대한 의미를 부여해서 전달( 중첩예외로 처리)
  - 처리하기 쉽고 단순하게 만들기 위해 포장  : 주로 체크 예외->uncheck예외로 바꿀 때 사용 
  
