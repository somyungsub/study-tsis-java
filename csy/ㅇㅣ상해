1장 오브젝트와 의존관계

- 스프링 : 자바기반으로한 기술 > 객체지향 프로그래밍이 가능 
오브젝트의 사이클이 어떤과정으로 단위로 만들어지는지 => 추후 오브젝트의 설계가 최족 목적
- 1장의 목표 : 오브젝트의 설계와 구현, 동작원리를 완벽하게 이해하기

1.1 초난감 DAO

- DAO : Data Access Object : DB를 사용해 데이터를 조작하는 기능을 전담하도록 만든 오브젝트

public class User {

    String id;
    String name;
    String password;

    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
}

모르는 용어 정리
1. JDBC
2. API
3. 자바빈 규약


1.5.3 스프링 IoC의 용어 정리

1)빈 : 스프링이 IoC 방식으로 관리하는 오브젝트 
- 스프링이 직접 그 생성과 제어를 담당하는 오브젝트

2)빈 팩토리 : 스프링의 IoC를 담당하는 핵심 컨테이너
- 빈 등록/생성/조회/리턴 등 부가적인 빈 관리
- 보통은 사용하지 않고 확장된 애플리케이션 컨텍스트 이용
- BeanFactory : 빈 팩토리가 구현하고 있는 가장 기본적인 인터페이스 : getBean() 정의됨

3)애플리케이션 컨텍스트 : 빈 팩토리를 확장한 IoC 컨테이너 
- ApplicationContext extends BeanFactory
- 스프링이 제공하는 애플리케이션 지원기능을 모두 포함한 것

4)설정정보 : 애플리케이션 컨텍스트 또는 빈 팩ㅌ리가 IoC를 적용하기 위해 사용하는 메타정보

5)컨테이너/IoC 컨테이너 : IoC 방식으로 빈을 관리한다는 의미로 애플리케이션 컨텍스트나 빈 팩토리를 컨테이너 또는 IoC컨테이너라고 함 
-IoC 컨테이너 : 주로 빈 팩토리의 관점에서

1.6 싱글톤 레지스트리와 오브젝트 스코프

1)애플리케이션 컨텍스트와 오브젝트 팩토리와의 차이
- DaoFactory의 UserDao() 메소드를 두번 호출해서 리턴되는 UserDao 오브젝트 비교 > 결과 : 같다
1.1)직접 생성한 DaoFactory 오브젝트 출력 코드

DaoFactory factory = new DaoFactoryO;
    UserDao daol = factory.userDao();
    UserDao dao2 = factory.userDao();
    System.out.println(daol);
    System.out.println(dao2);
1.2)스프링 컨텍스트로부터 가져온 오브젝트 출력 코드
ApplicationContext context = new AnnotationConfigApplicationContext(DaoFactory.class);
    UserDao dao3 = context.getBean("userDao", UserDao.class);
    UserDao dao4 = context.getBean("userDao", UserDao.class);
    System.out.println(dao3);
    System.out.println(dao4);
- 오브젝트 팩토리와 애플리케이션 컨텍스트의 동작방식
  스프링(애플리케이션 컨텍스트) : 여러 번에 걸쳐 빈을 요청해도 매번 동일한 오브젝트를 리턴 > 왜???? 
동일성 : 두 개의 오브젝트가 완전히 같은 동일한 오브젝트
동등성 : 동일한 정보를 담고있는 오브젝트
1.6.1 싱글톤 레지스트리로서의 애플리케이션 컨텍스트 
- 애플리케이션 컨텍스트는 싱글톤을 저장하고 관리하는 싱글톤 레지스트리

1) 서버 애플리케이션과 싱글톤
- 스프링이 싱글톤으로 빈을 만드는 이유 : 스프링이 적용되는 환경이 자바 엔터프라이즈 기술을 사용하는 환경이기 때문에
--> 데이터 액세스 로직, 서비스 로직, 비즈니스 로직 등 계층형 구조로 이루어진 복잡한 경우이기 때문에 매번 요청이 들어오면 서버가 부하가 걸리기 쉽다

- 싱글톤 원리 : 애플리케이션 안에 제한된 수, 한 개의 오브젝트만 만들어서 전역에서 접근가능하고 단일 오브젝트만 존재하며, 여러 곳에서 공유하는 경우에 주로 사용됨
- 싱글톤 패턴의 한계 :

서블릿
